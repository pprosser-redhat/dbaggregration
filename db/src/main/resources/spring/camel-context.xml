<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:tns="http://www.example.org/InputSchema"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd        http://camel.apache.org/schema/spring       http://camel.apache.org/schema/spring/camel-spring.xsd">
    <bean class="test.db.DBAggregator" id="dba"/>
    <!-- You could also define a traditional camel context here -->
    <bean
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager" id="txManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <camelContext id="camelContext-9285e9a7-96a8-4459-ae55-cdacb77e6d16"
        shutdownRoute="Defer" xmlns="http://camel.apache.org/schema/spring">
        <!--  <dataFormats>
            <jaxb contextPath="test.db.xml.input"
                filterNonXmlChars="false" fragment="false" id="incoming"
                ignoreJAXBElement="false" mustBeJAXBElement="false"
                objectFactory="false" prettyPrint="false"/>
        </dataFormats> -->
        <route id="ReadFile">
            <from id="_fromFile" uri="file:/Users/pprosser/testfiles?include=.*.xml&amp;move=.done"/>
            <setHeader headerName="inputNumber" id="SetInputNumber">
                <xpath resultType="java.lang.Integer">/tns:input/inputNumber/text()</xpath>
            </setHeader>
            <unmarshal id="_ConvertIncomingXML">
                <jaxb contextPath="test.db.xml.input"/>
            </unmarshal>
            <setHeader headerName="firstTime" id="_setHeader1">
                <constant>true</constant>
            </setHeader>
            <enrich id="Reference" strategyRef="dba">
                <constant>direct:getReference</constant>
            </enrich>
            <enrich id="Asset" strategyRef="dba">
                <constant>direct:getAsset</constant>
            </enrich>
            <marshal id="_marshal1">
                <jaxb contextPath="test.db.xml.output"/>
            </marshal>
            <log id="_log1" message="Incoming Message ${body}"/>
            <to id="_tofile" uri="file:/Users/pprosser/testfiles/output?fileName=output-${date:now:yyyyMMddHHmmss}.xml&amp;allowNullBody=true"/>
        </route>
        <route id="GetReference">
            <from id="_from1" uri="direct:getReference"/>
            <to id="_to1" uri="sql:select refdescription from phil.alerts where anumber = :#inputNumber?dataSource=dataSource&amp;outputHeader=refdescription&amp;outputType=SelectOne"/>
            <log id="_log2" message="Thet bodu ${body}"/>
        </route>
        <route id="GetAsset">
            <!--  <to id="_to2" uri="sql:select assetid from phil.assets where refdesc = :#refdescription?dataSource=dataSource&amp;outputHeader=assetid&amp;outputType=SelectOne"/> -->
            <from id="_from2" uri="direct:getAsset"/>
            <to id="_to2" uri="sql:select assetid, assetdescription from phil.assets where refdesc = :#refdescription?dataSource=dataSource"/>
        </route>
    </camelContext>
</beans>
